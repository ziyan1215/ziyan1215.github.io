<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elasticsearch on XuziYan</title>
    <link>https://xuziyan.ga/tags/elasticsearch/</link>
    <description>Recent content in Elasticsearch on XuziYan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 27 Jul 2019 16:12:37 +0000</lastBuildDate>
    
	<atom:link href="https://xuziyan.ga/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java应用中访问ElasticSearch</title>
      <link>https://xuziyan.ga/archive/1564215157/</link>
      <pubDate>Sat, 27 Jul 2019 16:12:37 +0000</pubDate>
      
      <guid>https://xuziyan.ga/archive/1564215157/</guid>
      <description>4 在Java应用中访问ElasticSearch 4.1 在Java应用中实现查询文档 ##pom中加入ElasticSearch6.2.4的依赖： &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.elasticsearch.client&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;transport&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.2.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;!-- java编译插件 --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt; &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt; &amp;lt;encoding&amp;gt;UTF-8&amp;lt;/encoding&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt;  4.2 在Java应用中实现添加文档  &amp;quot;{&amp;quot; + &amp;quot;\&amp;quot;id\&amp;quot;:\&amp;quot;1\&amp;quot;,&amp;quot; + &amp;quot;\&amp;quot;title\&amp;quot;:\&amp;quot;Java设计模式之装饰模式\&amp;quot;,&amp;quot; + &amp;quot;\&amp;quot;content\&amp;quot;:\&amp;quot;在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。\&amp;quot;,&amp;quot; + &amp;quot;\&amp;quot;postdate\&amp;quot;:\&amp;quot;2018-05-20 14:38:00\&amp;quot;,&amp;quot; + &amp;quot;\&amp;quot;url\&amp;quot;:\&amp;quot;csdn.net/79239072\&amp;quot;&amp;quot; + &amp;quot;}&amp;quot; XContentBuilder doc1 = XContentFactory.jsonBuilder() .startObject() .field(&amp;quot;id&amp;quot;,&amp;quot;3&amp;quot;) .field(&amp;quot;title&amp;quot;,&amp;quot;Java设计模式之单例模式&amp;quot;) .field(&amp;quot;content&amp;quot;,&amp;quot;枚举单例模式可以防反射攻击。&amp;quot;) .field(&amp;quot;postdate&amp;quot;,&amp;quot;2018-02-03&amp;quot;) .field(&amp;quot;url&amp;quot;,&amp;quot;csdn.net/79247746&amp;quot;) .endObject(); IndexResponse response = client.prepareIndex(&amp;quot;index1&amp;quot;, &amp;quot;blog&amp;quot;, null) .</description>
    </item>
    
    <item>
      <title>ElasticSearch原理</title>
      <link>https://xuziyan.ga/archive/1563940854/</link>
      <pubDate>Wed, 24 Jul 2019 12:00:54 +0000</pubDate>
      
      <guid>https://xuziyan.ga/archive/1563940854/</guid>
      <description>3 ElasticSearch原理 3.1 解析es的分布式架构 3.1.1 分布式架构的透明隐藏特性 ElasticSearch是一个分布式系统，隐藏了复杂的处理机制
分片机制：我们不用关心数据是按照什么机制分片的、最后放入到哪个分片中
分片的副本：
集群发现机制(cluster discovery)：比如当前我们启动了一个es进程，当启动了第二个es进程时，这个进程作为一个node自动就发现了集群，并且加入了进去
shard负载均衡：比如现在有10shard，集群中有3个节点，es会进行均衡的进行分配，以保持每个节点均衡的负载请求
请求路由
3.1.2 扩容机制 垂直扩容：购置新的机器，替换已有的机器
水平扩容：直接增加机器
3.1.3 rebalance 增加或减少节点时会自动均衡
3.1.4 master节点 主节点的主要职责是和集群操作相关的内容，如创建或删除索引，跟踪哪些节点是群集的一部分，并决定哪些分片分配给相关的节点。稳定的主节点对集群的健康是非常重要的。
3.1.5 节点对等 每个节点都能接收请求 每个节点接收到请求后都能把该请求路由到有相关数据的其它节点上 接收原始请求的节点负责采集数据并返回给客户端
3.2 分片和副本机制 1.index包含多个shard
2.每个shard都是一个最小工作单元，承载部分数据；每个shard都是一个lucene实例，有完整的建立索引和处理请求的能力
3.增减节点时，shard会自动在nodes中负载均衡
4.primary shard和replica shard，每个document肯定只存在于某一个primary shard以及其对应的replica shard中，不可能存在于多个primary shard
5.replica shard是primary shard的副本，负责容错，以及承担读请求负载
6.primary shard的数量在创建索引的时候就固定了，replica shard的数量可以随时修改
7.primary shard的默认数量是5，replica默认是1，默认有10个shard，5个primary shard，5个replica shard
8.primary shard不能和自己的replica shard放在同一个节点上（否则节点宕机，primary shard和副本都丢失，起不到容错的作用），但是可以和其他primary shard的replica shard放在同一个节点上
3.3 单节点环境下创建索引分析 PUT /myindex { &amp;quot;settings&amp;quot; : { &amp;quot;number_of_shards&amp;quot; : 3, &amp;quot;number_of_replicas&amp;quot; : 1 } }  这个时候，只会将3个primary shard分配到仅有的一个node上去，另外3个replica shard是无法分配的（一个shard的副本replica，他们两个是不能在同一个节点的）。集群可以正常工作，但是一旦出现节点宕机，数据全部丢失，而且集群不可用，无法接收任何请求。</description>
    </item>
    
    <item>
      <title>ES的嵌套字段</title>
      <link>https://xuziyan.ga/archive/1563796794/</link>
      <pubDate>Mon, 22 Jul 2019 19:59:54 +0000</pubDate>
      
      <guid>https://xuziyan.ga/archive/1563796794/</guid>
      <description>2.11 嵌套字段  由于在 Elasticsearch 中单个文档的增删改都是原子性操作,那么将相关实体数据都存储在同一文档中也就理所当然。 比如说,我们可以将订单及其明细数据存储在一个文档中。又比如,我们可以将一篇博客文章的评论以一个 comments 数组的形式和博客文章放在一起：
 PUT /my_index/blogpost/1 { &amp;quot;title&amp;quot;: &amp;quot;Nest eggs&amp;quot;, &amp;quot;body&amp;quot;: &amp;quot;Making your money work...&amp;quot;, &amp;quot;tags&amp;quot;: [ &amp;quot;cash&amp;quot;, &amp;quot;shares&amp;quot; ], &amp;quot;comments&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;John Smith&amp;quot;, &amp;quot;comment&amp;quot;: &amp;quot;Great article&amp;quot;, &amp;quot;age&amp;quot;: 28, &amp;quot;stars&amp;quot;: 4, &amp;quot;date&amp;quot;: &amp;quot;2014-09-01&amp;quot; }, { &amp;quot;name&amp;quot;: &amp;quot;Alice White&amp;quot;, &amp;quot;comment&amp;quot;: &amp;quot;More like this please&amp;quot;, &amp;quot;age&amp;quot;: 31, &amp;quot;stars&amp;quot;: 5, &amp;quot;date&amp;quot;: &amp;quot;2014-10-22&amp;quot; } ] }  如果我们依赖字段自动映射,那么 comments 字段会自动映射为 object 类型。
由于所有的信息都在一个文档中,当我们查询时就没有必要去联合文章和评论文档,查询效率就很高。
但是当我们使用如下查询时,上面的文档也会被当做是符合条件的结果：
GET /_search { &amp;quot;query&amp;quot;: { &amp;quot;bool&amp;quot;: { &amp;quot;must&amp;quot;: [ { &amp;quot;match&amp;quot;: { &amp;quot;name&amp;quot;: &amp;quot;Alice&amp;quot; }}, { &amp;quot;match&amp;quot;: { &amp;quot;age&amp;quot;: 28 }} ] } } }  ==Alice实际是31岁,不是28!</description>
    </item>
    
    <item>
      <title>ES的聚合&amp;复合查询</title>
      <link>https://xuziyan.ga/archive/1563681594/</link>
      <pubDate>Sun, 21 Jul 2019 11:59:54 +0000</pubDate>
      
      <guid>https://xuziyan.ga/archive/1563681594/</guid>
      <description>2.9 聚合查询 (1)sum
GET /lib4/items/_search { &amp;quot;size&amp;quot;:0, &amp;quot;aggs&amp;quot;: { &amp;quot;price_of_sum&amp;quot;: { &amp;quot;sum&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;price&amp;quot; } } } }  (2)min
GET /lib4/items/_search { &amp;quot;size&amp;quot;: 0, &amp;quot;aggs&amp;quot;: { &amp;quot;price_of_min&amp;quot;: { &amp;quot;min&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;price&amp;quot; } } } }  (3)max
GET /lib4/items/_search { &amp;quot;size&amp;quot;: 0, &amp;quot;aggs&amp;quot;: { &amp;quot;price_of_max&amp;quot;: { &amp;quot;max&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;price&amp;quot; } } } }  (4)avg
GET /lib4/items/_search { &amp;quot;size&amp;quot;:0, &amp;quot;aggs&amp;quot;: { &amp;quot;price_of_avg&amp;quot;: { &amp;quot;avg&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;price&amp;quot; } } } }  (5)cardinality:求基数</description>
    </item>
    
    <item>
      <title>ES的filter查询</title>
      <link>https://xuziyan.ga/archive/1563598794/</link>
      <pubDate>Sat, 20 Jul 2019 12:59:54 +0000</pubDate>
      
      <guid>https://xuziyan.ga/archive/1563598794/</guid>
      <description>2.8 Filter查询 filter是不计算相关性的，同时可以cache。因此，filter速度要快于query。
POST /lib4/items/_bulk {&amp;quot;index&amp;quot;: {&amp;quot;_id&amp;quot;: 1}} {&amp;quot;price&amp;quot;: 40,&amp;quot;itemID&amp;quot;: &amp;quot;ID100123&amp;quot;} {&amp;quot;index&amp;quot;: {&amp;quot;_id&amp;quot;: 2}} {&amp;quot;price&amp;quot;: 50,&amp;quot;itemID&amp;quot;: &amp;quot;ID100124&amp;quot;} {&amp;quot;index&amp;quot;: {&amp;quot;_id&amp;quot;: 3}} {&amp;quot;price&amp;quot;: 25,&amp;quot;itemID&amp;quot;: &amp;quot;ID100124&amp;quot;} {&amp;quot;index&amp;quot;: {&amp;quot;_id&amp;quot;: 4}} {&amp;quot;price&amp;quot;: 30,&amp;quot;itemID&amp;quot;: &amp;quot;ID100125&amp;quot;} {&amp;quot;index&amp;quot;: {&amp;quot;_id&amp;quot;: 5}} {&amp;quot;price&amp;quot;: null,&amp;quot;itemID&amp;quot;: &amp;quot;ID100127&amp;quot;}  2.8.1 简单的过滤查询 GET /lib4/items/_search { &amp;quot;post_filter&amp;quot;: { &amp;quot;term&amp;quot;: { &amp;quot;price&amp;quot;: 40 } } } GET /lib4/items/_search { &amp;quot;post_filter&amp;quot;: { &amp;quot;terms&amp;quot;: { &amp;quot;price&amp;quot;: [25,40] } } } GET /lib4/items/_search { &amp;quot;post_filter&amp;quot;: { &amp;quot;term&amp;quot;: { &amp;quot;itemID&amp;quot;: &amp;quot;ID100123&amp;quot; } } }  查看分词器分析的结果：</description>
    </item>
    
    <item>
      <title>ES基本查询</title>
      <link>https://xuziyan.ga/archive/1563522787/</link>
      <pubDate>Fri, 19 Jul 2019 15:53:07 +0000</pubDate>
      
      <guid>https://xuziyan.ga/archive/1563522787/</guid>
      <description>2.7 基本查询(Query查询) 2.7.1数据准备 PUT /lib3 { &amp;quot;settings&amp;quot;:{ &amp;quot;number_of_shards&amp;quot; : 3, &amp;quot;number_of_replicas&amp;quot; : 0 }, &amp;quot;mappings&amp;quot;:{ &amp;quot;user&amp;quot;:{ &amp;quot;properties&amp;quot;:{ &amp;quot;name&amp;quot;: {&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;}, &amp;quot;address&amp;quot;: {&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;}, &amp;quot;age&amp;quot;: {&amp;quot;type&amp;quot;:&amp;quot;integer&amp;quot;}, &amp;quot;interests&amp;quot;: {&amp;quot;type&amp;quot;:&amp;quot;text&amp;quot;}, &amp;quot;birthday&amp;quot;: {&amp;quot;type&amp;quot;:&amp;quot;date&amp;quot;} } } } } GET /lib3/user/_search?q=name:lisi GET /lib3/user/_search?q=name:zhaoliu&amp;amp;sort=age:desc  2.7.2 term查询和terms查询 term query会去倒排索引中寻找确切的term，它并不知道分词器的存在。这种查询适合keyword 、numeric、date。
term:查询某个字段里含有某个关键词的文档
GET /lib3/user/_search/ { &amp;quot;query&amp;quot;: { &amp;quot;term&amp;quot;: {&amp;quot;interests&amp;quot;: &amp;quot;changge&amp;quot;} } }  terms:查询某个字段里含有多个关键词的文档
GET /lib3/user/_search { &amp;quot;query&amp;quot;:{ &amp;quot;terms&amp;quot;:{ &amp;quot;interests&amp;quot;: [&amp;quot;hejiu&amp;quot;,&amp;quot;changge&amp;quot;] } } }  2.7.3 控制查询返回的数量 from：从哪一个文档开始 size：需要的个数</description>
    </item>
    
    <item>
      <title>ES基本操作</title>
      <link>https://xuziyan.ga/archive/1563415780/</link>
      <pubDate>Thu, 18 Jul 2019 10:09:40 +0000</pubDate>
      
      <guid>https://xuziyan.ga/archive/1563415780/</guid>
      <description>2节 ElasticSearch基本操作 2.1 倒排索引  Elasticsearch 使用一种称为 倒排索引 的结构，它适用于快速的全文搜索。一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。
 示例：
(1)：假设文档集合包含五个文档，每个文档内容如图所示，在图中最左端一栏是每个文档对应的文档编号。我们的任务就是对这个文档集合建立倒排索引。 (2):中文和英文等语言不同，单词之间没有明确分隔符号，所以首先要用分词系统将文档自动切分成单词序列。这样每个文档就转换为由单词序列构成的数据流，为了系统后续处理方便，需要对每个不同的单词赋予唯一的单词编号，同时记录下哪些文档包含这个单词，在如此处理结束后，我们可以得到最简单的倒排索引
“单词ID”：记录了每个单词的单词编号；
“单词”：是对应的单词；
“倒排列表：即每个单词对应的倒排列表
(3):索引系统还可以记录除此之外的更多信息,下图还记载了单词频率信息（TF）即这个单词在某个文档中的出现次数，之所以要记录这个信息，是因为词频信息在搜索结果排序时，计算查询和文档相似度是很重要的一个计算因子，所以将其记录在倒排列表中，以方便后续排序时进行分值计算。
(4):倒排列表中还可以记录单词在某个文档出现的位置信息
(1,&amp;lt;11&amp;gt;,1),(2,&amp;lt;7&amp;gt;,1),(3,&amp;lt;3,9&amp;gt;,2)
有了这个索引系统，搜索引擎可以很方便地响应用户的查询，比如用户输入查询词“Facebook”，搜索系统查找倒排索引，从中可以读出包含这个单词的文档，这些文档就是提供给用户的搜索结果，而利用单词频率信息、文档频率信息即可以对这些候选搜索结果进行排序，计算文档和查询的相似性，按照相似性得分由高到低排序输出，此即为搜索系统的部分内部流程。
2.1.1 倒排索引原理 1.The quick brown fox jumped over the lazy dog
2.Quick brown foxes leap over lazy dogs in summer
计算相关度分数时，文档1的匹配度高，分数会比文档2高
问题：
 Quick 和 quick 以独立的词条出现，然而用户可能认为它们是相同的词。
 fox 和 foxes 非常相似, 就像 dog 和 dogs ；他们有相同的词根。
 jumped 和 leap, 尽管没有相同的词根，但他们的意思很相近。他们是同义词。
 搜索含有 Quick fox的文档是搜索不到的
  使用标准化规则(normalization)： 建立倒排索引的时候，会对拆分出的各个单词进行相应的处理，以提升后面搜索的时候能够搜索到相关联的文档的概率</description>
    </item>
    
    <item>
      <title>ES入门</title>
      <link>https://xuziyan.ga/archive/1563379192/</link>
      <pubDate>Wed, 17 Jul 2019 23:59:52 +0000</pubDate>
      
      <guid>https://xuziyan.ga/archive/1563379192/</guid>
      <description>1 ElasticSearch概述 1.1 什么是ElasticSearch  ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTfulweb接口。ElasticSearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。构建在全文检索开源软件Lucene之上的Elasticsearch，不仅能对海量规模的数据完成分布式索引与检索，还能提供数据聚合分析。据国际权威的数据库产品评测机构DBEngines的统计，在2016年1月，Elasticsearch已超过Solr等，成为排名第一的搜索引擎类应用 概括：基于Restful标准的高扩展高可用的实时数据分析的全文搜索工具
 1.2 ElasticSearch的基本概念 1.3 Elasticsearch的架构  Gateway层   es用来存储索引文件的一个文件系统且它支持很多类型，例如：本地磁盘、共享存储（做snapshot的时候需要用到）、hadoop的hdfs分布式存储、亚马逊的S3。它的主要职责是用来对数据进行长持久化以及整个集群重启之后可以通过gateway重新恢复数据。
  Distributed Lucene Directory   Gateway上层就是一个lucene的分布式框架，lucene是做检索的，但是它是一个单机的搜索引擎，像这种es分布式搜索引擎系统，虽然底层用lucene，但是需要在每个节点上都运行lucene进行相应的索引、查询以及更新，所以需要做成一个分布式的运行框架来满足业务的需要。
  四大模块组件   districted lucene directory之上就是一些es的模块，Index Module是索引模块，就是对数据建立索引也就是通常所说的建立一些倒排索引等；Search Module是搜索模块，就是对数据进行查询搜索；Mapping模块是数据映射与解析模块，就是你的数据的每个字段可以根据你建立的表结构通过mapping进行映射解析，如果你没有建立表结构，es就会根据你的数据类型推测你的数据结构之后自己生成一个mapping，然后都是根据这个mapping进行解析你的数据；River模块在es2.0之后应该是被取消了，它的意思表示是第三方插件，例如可以通过一些自定义的脚本将传统的数据库（mysql）等数据源通过格式化转换后直接同步到es集群里，这个river大部分是自己写的，写出来的东西质量参差不齐，将这些东西集成到es中会引发很多内部bug，严重影响了es的正常应用，所以在es2.0之后考虑将其去掉。
  Discovery、Script   es4大模块组件之上有 Discovery模块：es是一个集群包含很多节点，很多节点需要互相发现对方，然后组成一个集群包括选主的，这些es都是用的discovery模块，默认使用的是 Zen，也可是使用EC2；es查询还可以支撑多种script即脚本语言，包括mvel、js、python等等。
  Transport协议层   再上一层就是es的通讯接口Transport，支持的也比较多：Thrift、Memcached以及Http，默认的是http，JMX就是java的一个远程监控管理框架，因为es是通过java实现的。
  RESTful接口层   最上层就是es暴露给我们的访问接口，官方推荐的方案就是这种Restful接口，直接发送http请求，方便后续使用nginx做代理、分发包括可能后续会做权限的管理，通过http很容易做这方面的管理。如果使用java客户端它是直接调用api，在做负载均衡以及权限管理还是不太好做。
 1.4 RESTfull API  一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。在目前主流的三种Web服务交互方案中，REST相比于SOAP（Simple Object Access protocol，简单对象访问协议）以及XML-RPC更加简单明了。
(Representational State Transfer 意思是：表述性状态传递)
 它使用典型的HTTP方法，诸如GET,POST.</description>
    </item>
    
  </channel>
</rss>